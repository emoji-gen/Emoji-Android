def privateDir = new File("${System.env.HOME}/project/Emoji-Android-Private")
def hasPrivateDir = privateDir.exists()

// -------------------------------------------------------------------------------------------------

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-noarg'
apply plugin: 'realm-android'

if (hasPrivateDir) {
    apply plugin: 'io.fabric'
}

// -------------------------------------------------------------------------------------------------

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'moe.pine.emoji'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

    // ---------------------------------------------------------------------------------------------

    if (hasPrivateDir) {
        ext.PROJECT_ROOT_DIR = projectDir.parent
        ext.PROJECT_PRIVATE_DIR = privateDir.absolutePath

        apply from: "$privateDir/signing.gradle", to: android
        apply from: "$privateDir/fabric.gradle", to: android
        apply from: "$privateDir/firebase.gradle", to: android

        def fabricApiKey = ext.fabricApiKey
        buildTypes {
            debug {
                applicationIdSuffix '.debug'
                signingConfig signingConfigs.debug
                manifestPlaceholders = [fabricApiKey: fabricApiKey]
            }
            release {
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
                manifestPlaceholders = [fabricApiKey: fabricApiKey]
            }
        }
    }

    else {
        logger.warn("@@@@@@@@@@@@@@@@@@@@ WARNING @@@@@@@@@@@@@@@@@@@@\n" +
                "$privateDir is not found\n" +
                "Please execute `git clone git@github.com:pine/Emoji-Android-Private.git ~/project/Emoji-Android-Private`\n")

        buildTypes {
            debug {
                applicationIdSuffix '.debug'
                manifestPlaceholders = [fabricApiKey: ""]
            }
            release {
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                manifestPlaceholders = [fabricApiKey: ""]
            }
        }
    }
}

dependencies {
    compile project(':lib-emoji')
    compile project(':lib-slack')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$support_library_version"
    compile "com.android.support:recyclerview-v7:$support_library_version"
    compile "com.android.support:design:$support_library_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "com.squareup.okhttp3:okhttp:$okhttp_version"
    compile "com.squareup.okhttp3:okhttp-urlconnection:$okhttp_version"
    compile 'com.squareup:otto:1.3.8'
    compile 'moe.pine:bottler:0.1.1'
    compile 'moe.pine.rgba:rgba:0.1.0'
    compile 'moe.pine.rgba:rgba-kotlin:0.1.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.QuadFlask:colorpicker:0.0.13'

    // Fabric
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }

    // Firebase
    compile 'com.google.firebase:firebase-core:10.0.1'
    compile 'com.google.firebase:firebase-crash:10.0.1'

    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

// -------------------------------------------------------------------------------------------------

apply plugin: 'com.getkeepsafe.dexcount'

if (hasPrivateDir) {
    apply plugin: 'com.google.gms.google-services'
}

allOpen {
    annotation('io.realm.annotations.RealmClass')
}

noArg {
    annotation('io.realm.annotations.RealmClass')
}
