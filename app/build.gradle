apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-noarg'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId 'moe.pine.emoji'
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    // ---------------------------------------------------------------------------------------------

    def privateDir = new File("${System.env.HOME}/project/Emoji-Android-Private")
    ext.PROJECT_ROOT_DIR = projectDir.parent
    ext.PROJECT_PRIVATE_DIR = privateDir.absolutePath

    if (privateDir.exists()) {
        apply from: "$privateDir/signing.gradle", to: android
        apply from: "$privateDir/fabric.gradle", to: android
        apply from: "$privateDir/firebase.gradle", to: android

        def fabricApiKey = ext.fabricApiKey
        buildTypes {
            debug {
                applicationIdSuffix '.debug'
                signingConfig signingConfigs.debug
                manifestPlaceholders = [fabricApiKey: fabricApiKey]
            }
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
                manifestPlaceholders = [fabricApiKey: fabricApiKey]
            }
        }
    } else {
        logger.warn("$privateDir is not found\n" +
                "Please execute `git clone git@github.com:pine/Emoji-Android-Private.git ~/project/Emoji-Android-Private`")

        def fabricApiKey = System.getenv('FABRIC_API_KEY')
        buildTypes {
            debug {
                applicationIdSuffix '.debug'
                manifestPlaceholders = [fabricApiKey: fabricApiKey]
            }
            release {
                minifyEnabled false
                manifestPlaceholders = [fabricApiKey: fabricApiKey]
            }
        }
    }
}

dependencies {
    compile project(':lib-emoji')
    compile project(':lib-slack')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$support_library_version"
    compile "com.android.support:recyclerview-v7:$support_library_version"
    compile "com.android.support:design:$support_library_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "com.squareup.okhttp3:okhttp:$okhttp_version"
    compile "com.squareup.okhttp3:okhttp-urlconnection:$okhttp_version"
    compile 'com.squareup:otto:1.3.8'
    compile 'moe.pine:bottler:0.1.1'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.QuadFlask:colorpicker:0.0.13'

    // Fabric
    compile('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
        transitive = true;
    }

    // Firebase
    compile 'com.google.firebase:firebase-core:10.0.1'
    compile 'com.google.firebase:firebase-crash:10.0.1'

    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

apply plugin: 'com.google.gms.google-services'

allOpen {
    annotation('io.realm.annotations.RealmClass')
}

noArg {
    annotation('io.realm.annotations.RealmClass')
}